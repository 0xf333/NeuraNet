Prime Video: India vs England
ENYour accountSign In
This title may not be available to watch from your location Go to amazon com to see the video catalog in United States India vs England"India vs England" is a tale of Kanishka, a vlogger in the U K , and Medini, a gemmology apprentice under her grandfather The two travel across India and fall in love While they are travelling, they get involved in the smuggling of an antique diamond of Indian origin This love story is about their adventures and the mystery of this unique diamond IMDb 5 92 h 14 min202013+Subtitle Badge IconSubtitle Badge IconSuspense·Action·DramaThis video is currently unavailableto watch in your locationTrailer IconTrailer IconTrailerAddAddWatchlistShareShareShare
DetailsDetails More info Content advisoryViolence, alcohol use, foul languageSubtitlesNone availableDirectorsNagathihalli ChandrashekharProducersY N ShankaregowdaStarringAnant Nag, Vasishta Simha, Manvitha HarishBy clicking play, you agree to our Terms of Use FeedbackSend us feedbackSupportGet Help
Terms and Privacy NoticeSend us feedbackHelp© 1996-2023, Amazon com, Inc or its affiliates . All Rights Reserved.
 *
 *   Licensed under the Apache License, Version 2.0 (the "License").
 *   You may not use this file except in compliance with the License.
 *   A copy of the License is located at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file. This file is distributed
 *   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 *   express or implied. See the License for the specific language governing
 *   permissions and limitations under the License.
 */

package com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.snapshot

import com.amazon.opendistroforelasticsearch.indexmanagement.elasticapi.instantiate.ActionMetadata
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.model.ManagedIndexConfig.SNAPSHOT_COPY_SETTINGS_FIELD
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.model.ManagedIndexMetaData.ActionSummary
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.model.ManagedIndexMetaData.ManagedIndexState
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.model.trigger.Schedule
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.ScheduleRunner
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.Step
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.indexerror.EnableRetryStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.indexerror.OnIndexErrorStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.indexerror.RetryStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.replica.RestorePreviousReplicaSettingsStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.replica.SetNewMaxReplicaCountStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.replica.UpdateReplicaCountStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.shrink.RestorePreviousShrinkSettingsStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.shrink.SetNewMaxIndexNumberOfShardsToTargetNumberOfShardsStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.shrink.UpdateShrinkSettingsStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.validation.ValidateErrorTrackingStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.waitreplica.WaitForNewReplicaCountStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.waitrollingupgrade.WaitForRollingUpgradeToCompleteStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.waitupgrade.WaitForUpgradeToCompleteStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.writealias.ClearTargetVelocityFieldStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.writealias.ClearTargetWriteIndexFieldStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.writealias.WriteUpdatedVelocityFieldStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.writeindex.BuyTimeStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.writeindex.FlushNewTargetIndexStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.writeindex.GetTargetWriteIndexStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.writeindex.RawWriteNewTargetIndexStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.writeindex. RefreshIndexStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.writeindex.RestorePreviousTargetWriteIndexFieldStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.writeindex.ResultStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.writeindex.RetryAfterSettingCheckoutsAllowedStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.writeindex.RetryPendingTasksStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.writeindex.SetCheckoutsAllowedStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.writeindex.SetTargetWriteIndexStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.writeindex.SyncFlushNewTargetIndexStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.writeindex.UpdateMaxNumberOfRefreshListenersStep
import com.amazon.opendistroforelasticsearch.indexmanagement.indexstatemanagement.step.writeindex.UpdateTargetWriteIndexSettingsStep
import org.elasticsearch.client.Client
import org.elasticsearch.cluster.routing.allocation.EnableAllocationDecider
import org.elasticsearch.cluster.routing.allocation.EnableallocationDeciderTests
import org.elasticsearch.cluster.routing.allocation.disable_allocation_decider
import org.elasticsearch.rest.RestStatus.OK
import org.elasticsearch.snapshots.SnapshotException
import org.elasticsearch.snapshots.SnapshotInfo
import org.elasticsearch.snapshots.SnapshotsService
import org.elasticsearch.snapshots.SnapshotsService.State
import org.elasticsearch.snapshots.create
import org.elasticsearch.snapshots.delete
import org.junit.Assert
import org.junit.Test
import org.elasticsearch.snapshots.restore
import org.elasticsearch.common.settings.Settings
import org.slf4j.LoggerFactory
import java.io.IOException
import java.time.Instant
import java.time.temporal.ChronoUnit
import kotlin.test.assertFalse
import kotlin.test.assertNotNull
import kotlin.test.assertNull

class SnapshotStepTests : ESSingleNodeTestCase() {

    private val logger = LoggerFactory.getLogger(javaClass)

    @Test
    fun testRunTakeSnapshot() {
        client().admin().cluster().prepareCreate("idx")
            .setData(
                """
                    |{
                    |  "settings": {
                    |    "index": {
                    |      "number_of_shards": 1,
                    |      "number_of_replicas": 0
                    |    }
                    |  }
                    |}
                    |""".trimMargin()
            ).get()
        client().admin().indices().preparePutMapping("idx").set